/**
 * Formulário que exibe na tela as ROMs disponíveis para Stream, e aguarda a seleção
 * do usuário.
 */


package com.grapeshot.halfnes;


public class GamesListStream extends javax.swing.JFrame {

    GUIImpl classePai;
    
    /**
     * Creates new form GamesListStream
     */
    public GamesListStream() {
        initComponents();
    }
    
    /**
     * Construtor da classe
     * @param classePai classe GUIImpl, para poder chamar o método da classe anterior sem precisar criar um novo método
     * @param listaJogos String contendo a lista de jogos para serem listados no Combo
     */
    public GamesListStream(GUIImpl classePai, String listaJogos) {
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE); // É fechado apenas o formulário
        setLocationRelativeTo(this); // Centraliza o formulário na tela
        
        this.classePai = classePai; // É armazenado a classe GUIImpl como global, para mais tarde acessar o método
                                    // "streamRom(String)" para poder prosseguir com o download da ROM selecionada
        
        popularComboBox(listaJogos);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBoxJogos = new javax.swing.JComboBox();
        jLabelSelecione = new javax.swing.JLabel();
        jButtonSelecionarRom = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("List of Streamable Games");

        jLabelSelecione.setText("Select a ROM to Stream:");

        jButtonSelecionarRom.setText("Stream that ROM!");
        jButtonSelecionarRom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelecionarRomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelSelecione)
                    .addComponent(jComboBoxJogos, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSelecionarRom))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelSelecione)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxJogos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonSelecionarRom)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSelecionarRomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelecionarRomActionPerformed
        /* 
         * Chama-se o método "streamRom(String)" passando como parâmetro o jogo
         * selecionado no combo.
         */
        classePai.streamRom((String)jComboBoxJogos.getSelectedItem());
        
        this.dispose();
    }//GEN-LAST:event_jButtonSelecionarRomActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GamesListStream.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GamesListStream.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GamesListStream.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GamesListStream.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GamesListStream().setVisible(true);
            }
        });
    }
    
    /**
     * Método que recebe uma String, separa ela com split e lista em um JComboBox
     * as ROMs disponíveis para serem baixadas.
     * @param listaJogos String contendo a lista de jogos do servidor.
     */
    public void popularComboBox(String listaJogos) {
        String jogo[] = listaJogos.split(":"); // Separa os jogos pelo caracter ':'
        
        for(int indice = 0; indice < jogo.length; indice++) {
            jComboBoxJogos.addItem(jogo[indice]); // Adiciona cada jogo separadamente no Combo
        }
        
        jComboBoxJogos.setSelectedIndex(0); // Seleciona o primeiro item da lista
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSelecionarRom;
    private javax.swing.JComboBox jComboBoxJogos;
    private javax.swing.JLabel jLabelSelecione;
    // End of variables declaration//GEN-END:variables
}
